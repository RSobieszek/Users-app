{"version":3,"sources":["components/User.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["User","props","_props$user","user","nickname","email","ip","react_default","a","createElement","className","align","onClick","e","window","confirm","delUser","emailRegex","RegExp","ipRegex","Form","state","formErrors","isFormValid","users","validateInput","property","val","_this","filter","item","length","isFormFilled","validateForm","nickval","emailval","result","_this$state$formError","nickValInput","emailValInput","console","log","handleSubmit","event","preventDefault","_this$state","setState","prevState","concat","Object","toConsumableArray","error","handleChange","_event$target","target","name","value","objectSpread","test","defineProperty","delAllUsers","compareParam","propName","b","toUpperCase","sortUsers","type","userArrSorted","sort","_this2","this","rendUsers","map","components_User","key","onSubmit","autoComplete","placeholder","onChange","Fragment","disabled","style","backgroundColor","border","display","React","Component","App","src_components_Form","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb81fbb5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction User(props) {\n    const {nickname, email, ip} = props.user\n\n    return (\n        <tr className=\"user-container\">\n            <td>\n                <p>{nickname}</p>\n            </td>\n            <td>\n                <p>{email}</p>\n            </td>\n            <td>\n                <p>{ip}</p>\n            </td>\n            <td align=\"center\">\n                <button \n                    onClick={(e) => {\n                        if (window.confirm(\"Delete this user?\")) { \n                            props.delUser(nickname)}\n                            }\n                    }>Delete\n                </button>\n            </td>\n        </tr>\n    )\n}\n\nexport default User\n","import React from 'react'\n\nimport User from './User'\nimport './Form.css'\n\n// Task specified sorting users by date, however adding date is never mentioned\n// anywhere else in exercise. I am assuming we should sort users by ip since it's the third \n// parameter required by form \n\nconst emailRegex = RegExp(\n    /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n)\n\nconst ipRegex = RegExp(\n    /^([0-9]{1,3}\\.){3}[0-9]{1,3}$/\n)\n\nclass Form extends React.Component{\n\n    state = {\n        nickname: \"\",\n        email: \"\",\n        ip: \"\",\n        formErrors: {\n            nickname: \"\",\n            email: \"\",\n            ip: \"\",\n        },\n        isFormValid: \"empty\",\n        users: [\n            {\n                nickname: \"noobmaster69\",\n                email: \"pure@pwnage.com\",\n                ip: \"231.212.155.155\"\n            },\n            {\n                nickname: \"legend27\",\n                email: \"test2@test2.com\",\n                ip: \"231.212.333.333\"\n            },\n            {\n                nickname: \"whiskerton\",\n                email: \"all@rise.com\",\n                ip: \"1.1.1.1\"\n            },\n        ]\n    }\n\n    // Checks if there is the same nickname or email in users\n    validateInput = (property, val) => {\n        return (\n            this.state.users.filter((item) => {\n                return item[property] === val\n                })\n                .length > 0 ? false : true) \n    }\n\n    // check if all fields in form are filled\n    isFormFilled = () => {\n        if (this.state.nickname && this.state.email && this.state.ip) return true\n        else return false\n    }\n\n    // Check form for given errors\n    validateForm = (nickval, emailval) => {\n\n        let result = null\n        const {nickname, email, ip} = this.state.formErrors\n        const nickValInput = this.validateInput(\"nickname\", nickval)\n        const emailValInput = this.validateInput(\"email\", emailval)\n\n        if (this.isFormFilled() &&\n            nickValInput &&\n            emailValInput &&\n            nickname === \"\" &&\n            email === \"\" &&\n            ip === \"\"\n            ) {\n            result = \"valid\"\n            console.log(this.state.formErrors)\n        } else if (!this.isFormFilled()) {\n            result = \"empty\"\n        } else if (!nickValInput){\n            result = \"nickname\"\n        } else if (!emailValInput) {\n            result = \"email\"\n        } \n        \n        return result\n    }\n\n    // Submit User\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const { nickname, email, ip, isFormValid } = this.state\n\n        switch(isFormValid) {\n            case \"valid\":\n                // Adding user to users array\n                this.setState((prevState) => ({\n                    users: [...prevState.users, {\n                        nickname: nickname,\n                        email: email,\n                        ip: ip\n                    }],\n                    // empties state\n                    nickname: \"\",\n                    email: \"\",\n                    ip: \"\",\n                    isFormValid: \"\"\n                }))\n                // this.setState(this.baseState)\n                break\n            case \"empty\":\n                console.error(\"Fill all inputs\")\n                break\n            case \"nickname\":\n                console.error(\"There is such nickname\")\n                break\n            case \"email\":\n                console.error(\"There is such email\")\n                break\n            default:\n                break\n        }\n    }\n\n    // Handle inputs changes\n    handleChange = (event) => {\n        event.preventDefault()\n        const {name, value} = event.target\n        let formErrors = { ...this.state.formErrors }\n\n        switch (name) {\n            case \"nickname\":\n                formErrors.nickname = \n                    value.length < 3 ? \"minimum 3 characters required\" : \"\"\n                break\n            case \"email\":\n                formErrors.email = emailRegex.test(value)\n                    ? \"\"\n                    : \"invalid email adress\"\n                break\n            case \"ip\":\n                formErrors.ip = ipRegex.test(value)\n                    ? \"\"\n                    : \"invalid ip adress\"\n                break\n            default:\n                break\n        }\n\n        // changing state and\n        // checking validity of form and then passing it to state\n        this.setState({ formErrors, [name]: value },\n            () => this.setState({\n                isFormValid: this.validateForm(this.state.nickname, this.state.email)\n            }))\n    }\n\n\n    // Delete specific user\n    delUser = (nickname) => {\n        this.setState({ \n            users: [...this.state.users\n                .filter(user => user.nickname !== nickname)\n            ]})\n    }\n\n    // delete all users from list\n    delAllUsers = () => {\n        this.setState({\n            users: []\n        })\n    }\n\n    // callback function to compare parameters of object\n    compareParam = (propName) => {\n        return ((a, b) => a[propName].toUpperCase() === b[propName].toUpperCase() ? 0 : a[propName].toUpperCase() < b[propName].toUpperCase() ? -1 : 1)\n    }\n\n    // Sorting users\n    sortUsers = (type) => {\n        const userArrSorted = this.state.users.sort(this.compareParam(type))\n\n        this.setState({\n            users: userArrSorted\n        }) \n    }\n\n    render() {\n        const rendUsers = this.state.users.map((user) => <User key={user.nickname} user={user} delUser={this.delUser}/>)\n        const { formErrors } = this.state\n\n        return(\n            <div>\n                <header>\n                    <h1>Simply Add Users</h1>\n                </header>\n                {/* INPUT FORM */}\n                <div className=\"form\">\n                    <form \n                        onSubmit={this.handleSubmit} \n                        autoComplete=\"off\">\n                        <input \n                            type=\"text\"\n                            name=\"nickname\"\n                            placeholder=\"Nickname\"\n                            onChange={this.handleChange}\n                            value={this.state.nickname}\n                        /> \n        \n                        {formErrors.nickname.length > 0 ? <span>{formErrors.nickname}</span> : null}\n                        {this.validateInput(\"nickname\", this.state.nickname) \n                            ? null \n                            : <React.Fragment>\n                                <span>There already is user with such nickname</span>\n                            </React.Fragment>\n                        }\n                        <br />\n\n                        <input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email\"\n                            onChange={this.handleChange}\n                            value={this.state.email}\n                        />\n        \n                        {formErrors.email.length > 0 ? <span>{formErrors.email}</span> : null}\n                        {this.validateInput(\"email\", this.state.email)\n                            ? null\n                            : <React.Fragment>\n                                <span>There already is user with this email</span>\n                            </React.Fragment>\n                        } \n                        <br />\n\n                        <input\n                            type=\"text\"\n                            name=\"ip\"\n                            placeholder=\"Ip number\"\n                            onChange={this.handleChange}\n                            value={this.state.ip}\n                        /> \n                        \n                        {formErrors.ip.length > 0 ? <span>{formErrors.ip}</span> : null}\n                        <br />\n\n                        <button type=\"submit\" disabled={this.state.isFormValid !== \"valid\"}>Add user</button>\n\n                        {this.state.isFormValid === \"empty\" \n                        ? <span className=\"fill\" >Please fill all fields</span>\n                        : null\n                        }\n                    </form>\n                </div>\n\n                {/* SORTING BAR */}\n                <div className=\"sort-bar\">\n                    <h2>Users:</h2>\n                    {/* RENDERS USERS LIST */}\n                    <table>\n                        <tr>\n                            <th>\n                                <button className=\"sort-btn\"\n                                    onClick={() => this.sortUsers(\"nickname\")}\n                                    disabled={!this.state.users.length}\n                                >Nickname  &#9662;\n                                </button>\n                            </th>\n                            <th>\n                                <button className=\"sort-btn\"\n                                    onClick={() => this.sortUsers(\"email\")}\n                                    disabled={!this.state.users.length}\n                                >Email  &#9662;\n                                </button>\n                            </th>\n                            <th>\n                                <button className=\"sort-btn\"\n                                    onClick={() => this.sortUsers(\"ip\")}\n                                    disabled={!this.state.users.length}\n                                >Ip  &#9662;\n                                </button>\n                            </th>\n                            <th>\n                                <button disabled style={{backgroundColor: \"transparent\", border: \"none\"}}>&nbsp;</button>\n                            </th>\n                        </tr>\n                        { rendUsers }\n                    </table>\n\n                    {/* REMOVE ALL USERS BUTTON */}\n                    <div className=\"del-btn-container\">\n                        <button \n                            onClick={() => {if (window.confirm('Do you want to delete all users?')){this.delAllUsers()}} }\n                            style={this.state.users.length > 0 ? null : {display: \"none\"}}\n                        >! Delete All Users !\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Form\n","import React from 'react';\nimport Form from './components/Form'\n\nfunction App() {\n  return (\n      <Form />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}